/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GuestOnlyRouteRouteImport } from './routes/_guest-only/route'
import { Route as AuthorizedOnlyRouteRouteImport } from './routes/_authorized-only/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GuestOnlyAuthLoginRouteImport } from './routes/_guest-only/auth/login'
import { Route as GuestOnlyAuthCallbackRouteImport } from './routes/_guest-only/auth/callback'
import { Route as AuthorizedOnlyQuizMineRouteImport } from './routes/_authorized-only/quiz/mine'
import { Route as AuthorizedOnlyQuizFavoritesRouteImport } from './routes/_authorized-only/quiz/favorites'
import { Route as AuthorizedOnlyQuizCreateRouteImport } from './routes/_authorized-only/quiz/create'
import { Route as AuthorizedOnlyNotificationListRouteImport } from './routes/_authorized-only/notification/list'
import { Route as AuthenticatedOrGuestUserSearchRouteImport } from './routes/_authenticated-or-guest/user/search'
import { Route as AuthenticatedOrGuestQuizSearchRouteImport } from './routes/_authenticated-or-guest/quiz/search'
import { Route as AuthenticatedOrGuestUserUserIdIndexRouteImport } from './routes/_authenticated-or-guest/user/$userId/index'
import { Route as AuthenticatedOrGuestQuizQuizIdIndexRouteImport } from './routes/_authenticated-or-guest/quiz/$quizId/index'
import { Route as AuthenticatedOrGuestUserUserIdFollowingRouteImport } from './routes/_authenticated-or-guest/user/$userId/following'
import { Route as AuthenticatedOrGuestUserUserIdFollowersRouteImport } from './routes/_authenticated-or-guest/user/$userId/followers'
import { Route as AuthenticatedOrGuestQuizQuizIdEditRouteImport } from './routes/_authenticated-or-guest/quiz/$quizId/edit'
import { Route as AuthenticatedOrGuestQuizQuizIdAttendeesRouteImport } from './routes/_authenticated-or-guest/quiz/$quizId/attendees'

const GuestOnlyRouteRoute = GuestOnlyRouteRouteImport.update({
  id: '/_guest-only',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorizedOnlyRouteRoute = AuthorizedOnlyRouteRouteImport.update({
  id: '/_authorized-only',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestOnlyAuthLoginRoute = GuestOnlyAuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => GuestOnlyRouteRoute,
} as any)
const GuestOnlyAuthCallbackRoute = GuestOnlyAuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => GuestOnlyRouteRoute,
} as any)
const AuthorizedOnlyQuizMineRoute = AuthorizedOnlyQuizMineRouteImport.update({
  id: '/quiz/mine',
  path: '/quiz/mine',
  getParentRoute: () => AuthorizedOnlyRouteRoute,
} as any)
const AuthorizedOnlyQuizFavoritesRoute =
  AuthorizedOnlyQuizFavoritesRouteImport.update({
    id: '/quiz/favorites',
    path: '/quiz/favorites',
    getParentRoute: () => AuthorizedOnlyRouteRoute,
  } as any)
const AuthorizedOnlyQuizCreateRoute =
  AuthorizedOnlyQuizCreateRouteImport.update({
    id: '/quiz/create',
    path: '/quiz/create',
    getParentRoute: () => AuthorizedOnlyRouteRoute,
  } as any)
const AuthorizedOnlyNotificationListRoute =
  AuthorizedOnlyNotificationListRouteImport.update({
    id: '/notification/list',
    path: '/notification/list',
    getParentRoute: () => AuthorizedOnlyRouteRoute,
  } as any)
const AuthenticatedOrGuestUserSearchRoute =
  AuthenticatedOrGuestUserSearchRouteImport.update({
    id: '/_authenticated-or-guest/user/search',
    path: '/user/search',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedOrGuestQuizSearchRoute =
  AuthenticatedOrGuestQuizSearchRouteImport.update({
    id: '/_authenticated-or-guest/quiz/search',
    path: '/quiz/search',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedOrGuestUserUserIdIndexRoute =
  AuthenticatedOrGuestUserUserIdIndexRouteImport.update({
    id: '/_authenticated-or-guest/user/$userId/',
    path: '/user/$userId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedOrGuestQuizQuizIdIndexRoute =
  AuthenticatedOrGuestQuizQuizIdIndexRouteImport.update({
    id: '/_authenticated-or-guest/quiz/$quizId/',
    path: '/quiz/$quizId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedOrGuestUserUserIdFollowingRoute =
  AuthenticatedOrGuestUserUserIdFollowingRouteImport.update({
    id: '/_authenticated-or-guest/user/$userId/following',
    path: '/user/$userId/following',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedOrGuestUserUserIdFollowersRoute =
  AuthenticatedOrGuestUserUserIdFollowersRouteImport.update({
    id: '/_authenticated-or-guest/user/$userId/followers',
    path: '/user/$userId/followers',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedOrGuestQuizQuizIdEditRoute =
  AuthenticatedOrGuestQuizQuizIdEditRouteImport.update({
    id: '/_authenticated-or-guest/quiz/$quizId/edit',
    path: '/quiz/$quizId/edit',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedOrGuestQuizQuizIdAttendeesRoute =
  AuthenticatedOrGuestQuizQuizIdAttendeesRouteImport.update({
    id: '/_authenticated-or-guest/quiz/$quizId/attendees',
    path: '/quiz/$quizId/attendees',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/quiz/search': typeof AuthenticatedOrGuestQuizSearchRoute
  '/user/search': typeof AuthenticatedOrGuestUserSearchRoute
  '/notification/list': typeof AuthorizedOnlyNotificationListRoute
  '/quiz/create': typeof AuthorizedOnlyQuizCreateRoute
  '/quiz/favorites': typeof AuthorizedOnlyQuizFavoritesRoute
  '/quiz/mine': typeof AuthorizedOnlyQuizMineRoute
  '/auth/callback': typeof GuestOnlyAuthCallbackRoute
  '/auth/login': typeof GuestOnlyAuthLoginRoute
  '/quiz/$quizId/attendees': typeof AuthenticatedOrGuestQuizQuizIdAttendeesRoute
  '/quiz/$quizId/edit': typeof AuthenticatedOrGuestQuizQuizIdEditRoute
  '/user/$userId/followers': typeof AuthenticatedOrGuestUserUserIdFollowersRoute
  '/user/$userId/following': typeof AuthenticatedOrGuestUserUserIdFollowingRoute
  '/quiz/$quizId': typeof AuthenticatedOrGuestQuizQuizIdIndexRoute
  '/user/$userId': typeof AuthenticatedOrGuestUserUserIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/quiz/search': typeof AuthenticatedOrGuestQuizSearchRoute
  '/user/search': typeof AuthenticatedOrGuestUserSearchRoute
  '/notification/list': typeof AuthorizedOnlyNotificationListRoute
  '/quiz/create': typeof AuthorizedOnlyQuizCreateRoute
  '/quiz/favorites': typeof AuthorizedOnlyQuizFavoritesRoute
  '/quiz/mine': typeof AuthorizedOnlyQuizMineRoute
  '/auth/callback': typeof GuestOnlyAuthCallbackRoute
  '/auth/login': typeof GuestOnlyAuthLoginRoute
  '/quiz/$quizId/attendees': typeof AuthenticatedOrGuestQuizQuizIdAttendeesRoute
  '/quiz/$quizId/edit': typeof AuthenticatedOrGuestQuizQuizIdEditRoute
  '/user/$userId/followers': typeof AuthenticatedOrGuestUserUserIdFollowersRoute
  '/user/$userId/following': typeof AuthenticatedOrGuestUserUserIdFollowingRoute
  '/quiz/$quizId': typeof AuthenticatedOrGuestQuizQuizIdIndexRoute
  '/user/$userId': typeof AuthenticatedOrGuestUserUserIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authorized-only': typeof AuthorizedOnlyRouteRouteWithChildren
  '/_guest-only': typeof GuestOnlyRouteRouteWithChildren
  '/_authenticated-or-guest/quiz/search': typeof AuthenticatedOrGuestQuizSearchRoute
  '/_authenticated-or-guest/user/search': typeof AuthenticatedOrGuestUserSearchRoute
  '/_authorized-only/notification/list': typeof AuthorizedOnlyNotificationListRoute
  '/_authorized-only/quiz/create': typeof AuthorizedOnlyQuizCreateRoute
  '/_authorized-only/quiz/favorites': typeof AuthorizedOnlyQuizFavoritesRoute
  '/_authorized-only/quiz/mine': typeof AuthorizedOnlyQuizMineRoute
  '/_guest-only/auth/callback': typeof GuestOnlyAuthCallbackRoute
  '/_guest-only/auth/login': typeof GuestOnlyAuthLoginRoute
  '/_authenticated-or-guest/quiz/$quizId/attendees': typeof AuthenticatedOrGuestQuizQuizIdAttendeesRoute
  '/_authenticated-or-guest/quiz/$quizId/edit': typeof AuthenticatedOrGuestQuizQuizIdEditRoute
  '/_authenticated-or-guest/user/$userId/followers': typeof AuthenticatedOrGuestUserUserIdFollowersRoute
  '/_authenticated-or-guest/user/$userId/following': typeof AuthenticatedOrGuestUserUserIdFollowingRoute
  '/_authenticated-or-guest/quiz/$quizId/': typeof AuthenticatedOrGuestQuizQuizIdIndexRoute
  '/_authenticated-or-guest/user/$userId/': typeof AuthenticatedOrGuestUserUserIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/quiz/search'
    | '/user/search'
    | '/notification/list'
    | '/quiz/create'
    | '/quiz/favorites'
    | '/quiz/mine'
    | '/auth/callback'
    | '/auth/login'
    | '/quiz/$quizId/attendees'
    | '/quiz/$quizId/edit'
    | '/user/$userId/followers'
    | '/user/$userId/following'
    | '/quiz/$quizId'
    | '/user/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/quiz/search'
    | '/user/search'
    | '/notification/list'
    | '/quiz/create'
    | '/quiz/favorites'
    | '/quiz/mine'
    | '/auth/callback'
    | '/auth/login'
    | '/quiz/$quizId/attendees'
    | '/quiz/$quizId/edit'
    | '/user/$userId/followers'
    | '/user/$userId/following'
    | '/quiz/$quizId'
    | '/user/$userId'
  id:
    | '__root__'
    | '/'
    | '/_authorized-only'
    | '/_guest-only'
    | '/_authenticated-or-guest/quiz/search'
    | '/_authenticated-or-guest/user/search'
    | '/_authorized-only/notification/list'
    | '/_authorized-only/quiz/create'
    | '/_authorized-only/quiz/favorites'
    | '/_authorized-only/quiz/mine'
    | '/_guest-only/auth/callback'
    | '/_guest-only/auth/login'
    | '/_authenticated-or-guest/quiz/$quizId/attendees'
    | '/_authenticated-or-guest/quiz/$quizId/edit'
    | '/_authenticated-or-guest/user/$userId/followers'
    | '/_authenticated-or-guest/user/$userId/following'
    | '/_authenticated-or-guest/quiz/$quizId/'
    | '/_authenticated-or-guest/user/$userId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthorizedOnlyRouteRoute: typeof AuthorizedOnlyRouteRouteWithChildren
  GuestOnlyRouteRoute: typeof GuestOnlyRouteRouteWithChildren
  AuthenticatedOrGuestQuizSearchRoute: typeof AuthenticatedOrGuestQuizSearchRoute
  AuthenticatedOrGuestUserSearchRoute: typeof AuthenticatedOrGuestUserSearchRoute
  AuthenticatedOrGuestQuizQuizIdAttendeesRoute: typeof AuthenticatedOrGuestQuizQuizIdAttendeesRoute
  AuthenticatedOrGuestQuizQuizIdEditRoute: typeof AuthenticatedOrGuestQuizQuizIdEditRoute
  AuthenticatedOrGuestUserUserIdFollowersRoute: typeof AuthenticatedOrGuestUserUserIdFollowersRoute
  AuthenticatedOrGuestUserUserIdFollowingRoute: typeof AuthenticatedOrGuestUserUserIdFollowingRoute
  AuthenticatedOrGuestQuizQuizIdIndexRoute: typeof AuthenticatedOrGuestQuizQuizIdIndexRoute
  AuthenticatedOrGuestUserUserIdIndexRoute: typeof AuthenticatedOrGuestUserUserIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest-only': {
      id: '/_guest-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestOnlyRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authorized-only': {
      id: '/_authorized-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedOnlyRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest-only/auth/login': {
      id: '/_guest-only/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof GuestOnlyAuthLoginRouteImport
      parentRoute: typeof GuestOnlyRouteRoute
    }
    '/_guest-only/auth/callback': {
      id: '/_guest-only/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof GuestOnlyAuthCallbackRouteImport
      parentRoute: typeof GuestOnlyRouteRoute
    }
    '/_authorized-only/quiz/mine': {
      id: '/_authorized-only/quiz/mine'
      path: '/quiz/mine'
      fullPath: '/quiz/mine'
      preLoaderRoute: typeof AuthorizedOnlyQuizMineRouteImport
      parentRoute: typeof AuthorizedOnlyRouteRoute
    }
    '/_authorized-only/quiz/favorites': {
      id: '/_authorized-only/quiz/favorites'
      path: '/quiz/favorites'
      fullPath: '/quiz/favorites'
      preLoaderRoute: typeof AuthorizedOnlyQuizFavoritesRouteImport
      parentRoute: typeof AuthorizedOnlyRouteRoute
    }
    '/_authorized-only/quiz/create': {
      id: '/_authorized-only/quiz/create'
      path: '/quiz/create'
      fullPath: '/quiz/create'
      preLoaderRoute: typeof AuthorizedOnlyQuizCreateRouteImport
      parentRoute: typeof AuthorizedOnlyRouteRoute
    }
    '/_authorized-only/notification/list': {
      id: '/_authorized-only/notification/list'
      path: '/notification/list'
      fullPath: '/notification/list'
      preLoaderRoute: typeof AuthorizedOnlyNotificationListRouteImport
      parentRoute: typeof AuthorizedOnlyRouteRoute
    }
    '/_authenticated-or-guest/user/search': {
      id: '/_authenticated-or-guest/user/search'
      path: '/user/search'
      fullPath: '/user/search'
      preLoaderRoute: typeof AuthenticatedOrGuestUserSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-or-guest/quiz/search': {
      id: '/_authenticated-or-guest/quiz/search'
      path: '/quiz/search'
      fullPath: '/quiz/search'
      preLoaderRoute: typeof AuthenticatedOrGuestQuizSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-or-guest/user/$userId/': {
      id: '/_authenticated-or-guest/user/$userId/'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof AuthenticatedOrGuestUserUserIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-or-guest/quiz/$quizId/': {
      id: '/_authenticated-or-guest/quiz/$quizId/'
      path: '/quiz/$quizId'
      fullPath: '/quiz/$quizId'
      preLoaderRoute: typeof AuthenticatedOrGuestQuizQuizIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-or-guest/user/$userId/following': {
      id: '/_authenticated-or-guest/user/$userId/following'
      path: '/user/$userId/following'
      fullPath: '/user/$userId/following'
      preLoaderRoute: typeof AuthenticatedOrGuestUserUserIdFollowingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-or-guest/user/$userId/followers': {
      id: '/_authenticated-or-guest/user/$userId/followers'
      path: '/user/$userId/followers'
      fullPath: '/user/$userId/followers'
      preLoaderRoute: typeof AuthenticatedOrGuestUserUserIdFollowersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-or-guest/quiz/$quizId/edit': {
      id: '/_authenticated-or-guest/quiz/$quizId/edit'
      path: '/quiz/$quizId/edit'
      fullPath: '/quiz/$quizId/edit'
      preLoaderRoute: typeof AuthenticatedOrGuestQuizQuizIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated-or-guest/quiz/$quizId/attendees': {
      id: '/_authenticated-or-guest/quiz/$quizId/attendees'
      path: '/quiz/$quizId/attendees'
      fullPath: '/quiz/$quizId/attendees'
      preLoaderRoute: typeof AuthenticatedOrGuestQuizQuizIdAttendeesRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthorizedOnlyRouteRouteChildren {
  AuthorizedOnlyNotificationListRoute: typeof AuthorizedOnlyNotificationListRoute
  AuthorizedOnlyQuizCreateRoute: typeof AuthorizedOnlyQuizCreateRoute
  AuthorizedOnlyQuizFavoritesRoute: typeof AuthorizedOnlyQuizFavoritesRoute
  AuthorizedOnlyQuizMineRoute: typeof AuthorizedOnlyQuizMineRoute
}

const AuthorizedOnlyRouteRouteChildren: AuthorizedOnlyRouteRouteChildren = {
  AuthorizedOnlyNotificationListRoute: AuthorizedOnlyNotificationListRoute,
  AuthorizedOnlyQuizCreateRoute: AuthorizedOnlyQuizCreateRoute,
  AuthorizedOnlyQuizFavoritesRoute: AuthorizedOnlyQuizFavoritesRoute,
  AuthorizedOnlyQuizMineRoute: AuthorizedOnlyQuizMineRoute,
}

const AuthorizedOnlyRouteRouteWithChildren =
  AuthorizedOnlyRouteRoute._addFileChildren(AuthorizedOnlyRouteRouteChildren)

interface GuestOnlyRouteRouteChildren {
  GuestOnlyAuthCallbackRoute: typeof GuestOnlyAuthCallbackRoute
  GuestOnlyAuthLoginRoute: typeof GuestOnlyAuthLoginRoute
}

const GuestOnlyRouteRouteChildren: GuestOnlyRouteRouteChildren = {
  GuestOnlyAuthCallbackRoute: GuestOnlyAuthCallbackRoute,
  GuestOnlyAuthLoginRoute: GuestOnlyAuthLoginRoute,
}

const GuestOnlyRouteRouteWithChildren = GuestOnlyRouteRoute._addFileChildren(
  GuestOnlyRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthorizedOnlyRouteRoute: AuthorizedOnlyRouteRouteWithChildren,
  GuestOnlyRouteRoute: GuestOnlyRouteRouteWithChildren,
  AuthenticatedOrGuestQuizSearchRoute: AuthenticatedOrGuestQuizSearchRoute,
  AuthenticatedOrGuestUserSearchRoute: AuthenticatedOrGuestUserSearchRoute,
  AuthenticatedOrGuestQuizQuizIdAttendeesRoute:
    AuthenticatedOrGuestQuizQuizIdAttendeesRoute,
  AuthenticatedOrGuestQuizQuizIdEditRoute:
    AuthenticatedOrGuestQuizQuizIdEditRoute,
  AuthenticatedOrGuestUserUserIdFollowersRoute:
    AuthenticatedOrGuestUserUserIdFollowersRoute,
  AuthenticatedOrGuestUserUserIdFollowingRoute:
    AuthenticatedOrGuestUserUserIdFollowingRoute,
  AuthenticatedOrGuestQuizQuizIdIndexRoute:
    AuthenticatedOrGuestQuizQuizIdIndexRoute,
  AuthenticatedOrGuestUserUserIdIndexRoute:
    AuthenticatedOrGuestUserUserIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
